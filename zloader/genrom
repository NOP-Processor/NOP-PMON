#!/usr/bin/perl 
my ($myedata,$myend,$initmips,$mystart);
open(F,qq(objdump -x $ARGV[0]|));
while(<F>)
{
chomp;
if(/([0-9a-f]+).+_edata/){
   $myedata=qq(0x$1);
 }

if(/([0-9a-f]+).+_end$/){
   $myend=qq(0x$1);
 }
if(/([0-9a-f]+).+initmips$/){
   $myinitmips=qq(0x$1);
 }
if(/([0-9a-f]+).+\s_start$/){
   $mystart=qq(0x$1);
 }
}  

printf(<< "END"
void realinitmips(unsigned int msize);
void enable_cache()
{
	    __asm__ volatile(
"        li.w      \$r4,0x10;\\n" \\ 
"        li.w      \$r5,0x30;\\n" \\ 
"        csrxchg \$r4,\$r5, 0x181;\\n" \\
		::
		:"\$r4","\$r5"
		);
}

//#ifndef NOCACHE2
//void flush_cache2()
//{
//asm volatile(\
//".set mips3;\\n" \\
//"	li	  \$2, 0x80000000;\\n" \\
//"   addu  \$3,\$2,512*1024/4;\\n" \\
//"10:\\n" \\
//"	cache	3, 0(\$2);\\n" \\
//"	cache	3, 1(\$2);\\n" \\
//"	cache	3, 2(\$2);\\n" \\
//"	cache	3, 3(\$2);\\n" \\
//"	addu	\$2, 32;\\n" \\
//"	bne	    \$2,\$3, 10b;\\n" \\
//"	nop;\\n" \\
//:::"\$2","\$3"
//);
//}
//#else
void flush_cache()
{
asm volatile(\
"        li.w     \$r5,256;\\n" 
"        li.w     \$r4,0x0;\\n" 
"1:\\n" 
"        cacop  0x8,\$r4,0x0;\\n" 
"        cacop  0x8,\$r4,0x1;\\n" 
"        cacop  0x9,\$r4,0x0;\\n" 
"        cacop  0x9,\$r4,0x1;\\n"  
"        addi.w \$r5,\$r5,-1;\\n"
"        srli.w \$r4,\$r4, 4;\\n" 
"        addi.w \$r4,\$r4, 1;\\n" 
"        slli.w \$r4,\$r4, 4;\\n" 
"        blt    \$r0,\$r5,1b;\\n" 
::: "\$r4","\$r5");
}
//#endif

void led_on(char witch)
{
asm volatile(\
	"	li.w	    \$r4, 0xbfd0f000;\\n" \
	"	ld.b	\$r5, \$r4, 0;\\n"
	"	and     \$r5, \$r5, \%0;\\n"
	"	st.b 	\$r5, \$r4, 0; \\n" \
	:
	:"r"(witch)
	: "\$r4", "\$r5"
	);
}

void initmips(unsigned int msize,int dmsize,int dctrl)
{
    long *edata=(void *)$myedata;
    long *end=(void *)$myend;
    int *p;
    int a,b;
	int debug=(msize==0);
	CPU_TLBClear();

    tgt_puts("\\r\\n Uncompressing Bios \\r\\n");
	enable_cache();
    //if(!debug||dctrl&1) {
	//	enable_cache();
	//}
	led_on(0x6f);
	while(1)
	{
    if(run_unzip(biosdata,$mystart)>=0)break;
	}
    tgt_puts("\\r\\n OK,Booting Bios\\r\\n");
    for(p=edata;p<=end;p++)
    {
        *p=0;
    }
	memset($mystart-0x1000,0,0x1000);//$mystart-0x1000 for frame(registers),memset for pretty
#ifdef NOCACHE2
	flush_cache();
#else
	//flush_cache2(); //Lc modify
#endif
    realinitmips(debug?dmsize:msize);
}


void realinitmips(unsigned int msize)
{
	     asm ("li.w  \$r3,$mystart-0x4000;\\n" \\
"		       li.w \$r12,$myinitmips;\\n" \\
"			   move \$r4,\%0;\\n" \\
"			   jirl \$r0,\$r12,0;\\n" \\
"			  1: b 1b;" \\
          :
          : "r" (msize)
          : "\$r12", "\$3","\$4");

}
int tgt_puts(char *str)
{
	while(*str)
	tgt_putchar(*str++);
	return 0;
}
END
);
